name: ML Model CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  MODEL_NAME: 'customer_classifier'
  REGISTRY: ghcr.io
  IMAGE_NAME: ml-model-api

jobs:
  # Stage 1: Code Quality and Unit Tests
  test:
    runs-on: ubuntu-latest
    name: Code Quality & Unit Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black

    - name: Code formatting check
      run: |
        echo "üé® Checking code formatting..."
        black --check src/ tests/

    - name: Lint code
      run: |
        echo "üîç Linting code..."
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Stage 2: Model Training and Validation
  train:
    runs-on: ubuntu-latest
    name: Model Training & Validation
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Train model
      run: |
        echo "üéØ Training ML model..."
        python src/train.py

    - name: Validate model performance
      run: |
        echo "üìä Validating model performance..."
        # Check if model file exists
        if [ ! -f "models/model.joblib" ]; then
          echo "‚ùå Model file not found!"
          exit 1
        fi

        # Check if metrics file exists
        if [ ! -f "models/model_metrics.json" ]; then
          echo "‚ùå Model metrics file not found!"
          exit 1
        fi

        # Validate metrics (basic check)
        #        python -c "
        #import json
        #with open('models/model_metrics.json', 'r') as f:
        #metrics = json.load(f)

        #print('Model Performance:')
        #for metric, value in metrics.items():
        #if metric != 'timestamp':
        #print(f'  {metric}: {value:.4f}')

# Check minimum thresholds
#min_accuracy = 0.80
#if metrics.get('accuracy', 0) < min_accuracy:
#    print(f'‚ùå Model accuracy {metrics.get(\"accuracy\", 0):.4f} below threshold {min_accuracy}')
#    exit(1)
#else:
#    print(f'‚úÖ Model accuracy {metrics.get(\"accuracy\", 0):.4f} meets threshold')
        "

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-model
        path: |
          models/
          config/
        retention-days: 30

  # Stage 3: Integration Testing
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Testing
    needs: train

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        path: .

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start API server
      run: |
        echo "üöÄ Starting API server for integration testing..."
        python src/predict.py &
        API_PID=$!
        echo $API_PID > api.pid

        # Wait for server to start
        sleep 10

    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."

        # Health check
        curl -f http://localhost:5000/health || (echo "‚ùå Health check failed" && exit 1)
        echo "‚úÖ Health check passed"

        # Test prediction endpoint
        response=$(curl -s -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{"features": [15.0, 20.0, 100.0, 500.0, 0.1, 0.09, 0.03, 0.02, 0.18, 0.06]}')

        echo "API Response: $response"

        # Check if response contains expected fields
        if echo "$response" | grep -q "prediction"; then
          echo "‚úÖ Prediction endpoint test passed"
        else
          echo "‚ùå Prediction endpoint test failed"
          exit 1
        fi

    - name: Stop API server
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
          rm api.pid
        fi

  # Stage 4: Build and Push Docker Image
  build-image:
    runs-on: ubuntu-latest
    name: Build & Push Docker Image
    needs: integration-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: trained-model
        path: .

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Stage 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"

        # In a real scenario, this would deploy to your staging environment
        # Examples:
        # - Update Kubernetes deployment
        # - Deploy to cloud container service
        # - Update docker-compose configuration

        echo "‚úÖ Staging deployment completed"

    - name: Run smoke tests
      run: |
        echo "üí® Running smoke tests in staging..."

        # In a real scenario, run smoke tests against staging environment
        # curl -f https://staging-api.example.com/health

        echo "‚úÖ Smoke tests passed"

  # Stage 6: Deploy to Production (Manual Approval)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production environment
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"

        # In a real scenario, this would deploy to your production environment
        # This job requires manual approval due to the 'production' environment

        echo "‚úÖ Production deployment completed"

    - name: Run production health checks
      run: |
        echo "üè• Running production health checks..."

        # In a real scenario, run comprehensive health checks
        # curl -f https://api.example.com/health

        echo "‚úÖ Production health checks passed"

    - name: Notify team
      run: |
        echo "üì¢ Notifying team of successful deployment..."
        # In a real scenario, send notifications to Slack, email, etc.
